<!--
	Core configuration for Ucommerce components.
-->
<configuration>

  <components>

    <component
      id="TextSanitizer"
      service="Ucommerce.Security.ITextSanitizer, Ucommerce"
      type="Ucommerce.SystemWeb.Security.TextSanitizer, Ucommerce.SystemWeb" />

    <component
      id="HtmlSanitizer"
      service="Ucommerce.Security.IHtmlSanitizer, Ucommerce"
      type="Ucommerce.SystemWeb.Security.HtmlSanitizer, Ucommerce.SystemWeb" />

    <component
      id="CatalogConfiguration"
      service="Ucommerce.Infrastructure.Configuration.CatalogConfiguration, Ucommerce.Infrastructure"
      type="Ucommerce.Infrastructure.Configuration.CatalogConfiguration, Ucommerce.Infrastructure">
      <parameters>
        <DefaultCultureCode>#{defaultCultureCode}</DefaultCultureCode>
        <EnforceCategoryNameUniquenessWithinCatalogs>#{enforceCategoryNameUniquenessWithinCatalogs}</EnforceCategoryNameUniquenessWithinCatalogs>
      </parameters>
    </component>

    <!-- Data Access -->
		<component
			id="SessionProvider"
			service="Ucommerce.EntitiesV2.ISessionProvider, Ucommerce"
			type="Ucommerce.EntitiesV2.SessionProvider, Ucommerce">
		  <parameters>
        <EnableCache>#{enableCache}</EnableCache>
        <CacheProvider>#{cacheProvider}</CacheProvider>
		    <ConnectionIsolation>#{databaseConnectionIsolationLevel}</ConnectionIsolation>
		  </parameters>
			<interceptors>
				<interceptor>${ExceptionLoggingInterceptor}</interceptor>
			</interceptors>
		</component>

    <component
      id="ConnectionStringLocator"
      service="Ucommerce.Infrastructure.Configuration.IConnectionStringLocator, Ucommerce.Infrastructure"
      type="Ucommerce.Infrastructure.Configuration.ConnectionStringLocator, Ucommerce.Infrastructure">
      <parameters>
        <connectionString>#{connectionString}</connectionString>
      </parameters>
    </component>

		<component
			id="StatelessSessionProvider"
			service="Ucommerce.EntitiesV2.IStatelessSessionProvider, Ucommerce"
			type="Ucommerce.EntitiesV2.SessionProvider, Ucommerce">
		  <parameters>
		    <EnableCache>#{enableCache}</EnableCache>
		    <CacheProvider>#{cacheProvider}</CacheProvider>
		    <ConnectionIsolation>#{databaseConnectionIsolationLevel}</ConnectionIsolation>
		  </parameters>
			<interceptors>
				<interceptor>${ExceptionLoggingInterceptor}</interceptor>
			</interceptors>
		</component>

		<component
			id="CacheProvider"
			service="Ucommerce.EntitiesV2.ICacheProvider, Ucommerce"
			type="Ucommerce.EntitiesV2.CacheProvider, Ucommerce"/>

		<component
			id="Ucommerce.CoreDataMappings"
			service="Ucommerce.EntitiesV2.IContainsNHibernateMappingsTag, Ucommerce"
			type="Ucommerce.EntitiesV2.MappingAssemblyTag, Ucommerce"/>

		<component
			id="Repository"
			service="Ucommerce.EntitiesV2.IRepository`1, Ucommerce"
			type="Ucommerce.EntitiesV2.Repository`1, Ucommerce"/>

		<component
			id="SoftDeletableRepository"
			service="Ucommerce.EntitiesV2.ISoftDeletableRepository`1, Ucommerce"
			type="Ucommerce.EntitiesV2.SoftDeletableRepository`1, Ucommerce"/>

		<!-- Interceptors -->
		<component
			id="ExceptionLoggingInterceptor"
			service="Ucommerce.Infrastructure.Interceptor.ExceptionLoggingInterceptor, Ucommerce.Infrastructure"
			type="Ucommerce.Infrastructure.Interceptor.ExceptionLoggingInterceptor, Ucommerce.Infrastructure"/>

		<component
			id="XmlExceptionInterceptor"
			service="Ucommerce.Xslt.Interceptors.XmlExceptionInterceptor, Ucommerce.Infrastructure"
			type="Ucommerce.Xslt.Interceptors.XmlExceptionInterceptor, Ucommerce.Infrastructure"/>

		<component
			id="TimingInterceptor"
			service="Ucommerce.Infrastructure.Interceptor.TimingInterceptor, Ucommerce.Infrastructure"
			type="Ucommerce.Infrastructure.Interceptor.TimingInterceptor, Ucommerce.Infrastructure"/>

		<!-- Context API -->

    <component
			id="LocalizationContext"
			service="Ucommerce.Infrastructure.Globalization.ILocalizationContext, Ucommerce.Infrastructure"
			type="Ucommerce.Infrastructure.Globalization.Globalization, Ucommerce.Infrastructure">
      <parameters>
        <DefaultCultureCode>#{defaultCultureCode}</DefaultCultureCode>
      </parameters>
    </component>

		<!-- Services -->
		<component
			id="OrderService"
			service="Ucommerce.Transactions.IOrderService, Ucommerce"
			type="Ucommerce.Transactions.OrderService, Ucommerce"/>

		<component
			id="TaxService"
			service="Ucommerce.Catalog.ITaxService, Ucommerce"
			type="Ucommerce.Catalog.TaxService, Ucommerce"/>

		<component
			id="UrlService"
			service="Ucommerce.Catalog.IUrlService, Ucommerce"
			type="Ucommerce.Catalog.UrlService, Ucommerce"/>

		<component
			id="ProductReviewService"
			service="Ucommerce.Catalog.ProductReviewService, Ucommerce"
			type="Ucommerce.Catalog.ProductReviewService, Ucommerce"/>

		<component
		  id="NumberSeriesService"
		  service ="Ucommerce.Transactions.INumberSeriesService, Ucommerce"
		  type="Ucommerce.Transactions.NumberSeriesService, Ucommerce"/>

		<component
		  id="RoundingService"
		  service ="Ucommerce.Transactions.IRoundingService, Ucommerce"
		  type="Ucommerce.Transactions.RoundingService, Ucommerce"/>

		<component
			id="AbsoluteUrlService"
			service="Ucommerce.Web.IAbsoluteUrlService, Ucommerce"
			type="Ucommerce.Web.Impl.AbsoluteUrlService, Ucommerce">
			<parameters>
				<includeLanguage>False</includeLanguage>
				<includePort>False</includePort>
			</parameters>
		</component>

		<component
			id="UcommercePathService"
			service="Ucommerce.Infrastructure.Runtime.IPathService, Ucommerce.Infrastructure"
			type="Ucommerce.Infrastructure.Runtime.UcommercePathService, Ucommerce.Infrastructure"/>

		<component
			id="CallbackUrl"
			service="Ucommerce.Web.ICallbackUrl, Ucommerce"
			type="Ucommerce.Web.Impl.CallbackUrl, Ucommerce" />

    <component
      id="RequestPaymentUrl"
      service="Ucommerce.Web.IRequestPaymentUrl, Ucommerce"
      type="Ucommerce.Web.Impl.RequestPaymentUrl, Ucommerce" />

		<component
			id="AppsService"
			service="Ucommerce.Apps.IAppsService, Ucommerce"
			type="Ucommerce.Apps.AppsService, Ucommerce"/>
 
    <!-- Infrastructure -->
		<component
			id="WebRuntimeInspector"
			service="Ucommerce.Infrastructure.Environment.IWebRuntimeInspector, Ucommerce.Infrastructure"
			type="Ucommerce.Infrastructure.Environment.WebRuntimeInspector, Ucommerce.Infrastructure" />

		<component
			id="WebRuntimeInspector"
			service="Ucommerce.Infrastructure.Environment.IWebRuntimeInspector, Ucommerce.Infrastructure"
			type="Ucommerce.Infrastructure.Environment.WebRuntimeInspector, Ucommerce.Infrastructure" />

		<component
			id="TreeNodeConverterService"
			service="Ucommerce.Web.ITreeNodeContentToTreeNodeConverter, Ucommerce"
			type="Ucommerce.Web.Impl.TreeNodeContentToTreeNodeConverter, Ucommerce">
			<parameters>
				<urlConverters>
					<list type="Ucommerce.Tree.ITreeNodeTypeToUrlConverter, Ucommerce">
						<item>${DefaultUrlConverter}</item>
						<item>${AppActionUrlConverter}</item>
						<item>${ActionUrlConverter}</item>
					</list>
				</urlConverters>
				<optionConverters>
					<list type="Ucommerce.Tree.ITreeNodeOptionToOptionItemConverter, Ucommerce">
						<item>${DefaultOptionConverter}</item>
					</list>
				</optionConverters>
			</parameters>
		</component>

		<component
			id="DefaultUrlConverter"
			service="Ucommerce.Tree.ITreeNodeTypeToUrlConverter, Ucommerce"
			type="Ucommerce.Tree.Impl.Converters.TreeNodeTypeToUrlConverter, Ucommerce" />

		<component
			id="AppActionUrlConverter"
			service="Ucommerce.Tree.ITreeNodeTypeToUrlConverter, Ucommerce"
			type="Ucommerce.Tree.Impl.Converters.TreeNodeAppActionToUrlConverter, Ucommerce" />

		<component
			id="ActionUrlConverter"
			service="Ucommerce.Tree.ITreeNodeTypeToUrlConverter, Ucommerce"
			type="Ucommerce.Tree.Impl.Converters.TreeNodeActionToUrlConverter, Ucommerce" />

		<component
			id="DefaultOptionConverter"
			service="Ucommerce.Tree.ITreeNodeOptionToOptionItemConverter, Ucommerce"
			type="Ucommerce.Tree.Impl.Converters.TreeNodeOptionToOptionItemConverter, Ucommerce" />

		<!-- TreeNodeService providers-->
		<component id="TreeNodeServiceProvider"
			service="Ucommerce.Web.ITreeNodeServiceProvider, Ucommerce"
			type="Ucommerce.Web.Impl.TreeNodeServiceProvider, Ucommerce">
		</component>

    <component
      id="SectionGroupFactory"
      service="Ucommerce.Presentation.Web.Pages.ISectionGroupFactory, Ucommerce.Presentation"
      type="Ucommerce.Presentation.Web.Pages.SectionGroupFactory, Ucommerce.Presentation" />

		<component
			id="ResourceManager"
			service="Ucommerce.Infrastructure.Globalization.IResourceManager, Ucommerce.Infrastructure"
			type="Ucommerce.Infrastructure.Globalization.GlobalResourceManager, Ucommerce.Infrastructure" />

		<component
			id="UpdateAuditModifiedData"
			service="Ucommerce.EntitiesV2.Revisions.IUpdateAuditModifiedData, Ucommerce"
			type="Ucommerce.EntitiesV2.Revisions.Impl.UpdateAuditModifiedData, Ucommerce" />

		<!--- Security -->
		<component
			id="RoleService"
			service="Ucommerce.Security.IRoleService, Ucommerce"
			type="Ucommerce.Security.RoleService, Ucommerce"/>

		<component
				id="EnsureRolesService"
				service="Ucommerce.Security.IEnsureRolesAreUpToDateService, Ucommerce"
				type="Ucommerce.Security.EnsureRolesAreUpToDateService, Ucommerce"/>

    <component
				id="SecurityService"
				service="Ucommerce.Security.ISecurityService, Ucommerce"
				type="Ucommerce.Security.SecurityService, Ucommerce">
      <parameters>
        <Enabled>#{securityFoundationEnabled}</Enabled>
      </parameters>
    </component>

    <component
      id="EntityPropertyValueService"
      service="Ucommerce.EntitiesV2.Definitions.IEntityPropertyValueService, Ucommerce"
      type="Ucommerce.EntitiesV2.Definitions.EntityPropertyValueService, Ucommerce"/>

    <component
      id="DataTypeDefinitionInspector"
      service="Ucommerce.EntitiesV2.Definitions.IDataTypeDefinitionInspector, Ucommerce"
      type="Ucommerce.EntitiesV2.Definitions.DataTypeDefinitionInspector, Ucommerce"/>

    <!-- Services -->
    <component
      id="DefinitionGraphService"
      service="Ucommerce.Services.IDefinitionGraphService, Ucommerce"
      type="Ucommerce.Services.Impl.DefinitionGraphService, Ucommerce"/>

    <!-- Currency Conversion Service -->
    <component
      id="CurrencyConversionService"
      service="Ucommerce.Transactions.ICurrencyConversionService, Ucommerce"
      type="Ucommerce.Transactions.CurrencyConversionService, Ucommerce"/>


    <!-- Feed Service -->
    <component
      id="FeedService"
      service="Ucommerce.Dashboard.IFeedService, Ucommerce"
      type="Ucommerce.Dashboard.Impl.InMemoryFeed, Ucommerce">
      <parameters>
        <FeedSize>20</FeedSize>
      </parameters>
    </component>


    <!--Currency Exchange Rate Service -->
    <component
      id="CurrencyExchangeRateService"
      service="Ucommerce.Catalog.ICurrencyExchangeRateService, Ucommerce"
      type="Ucommerce.Catalog.Impl.DefaultCurrencyExchangeRateService, Ucommerce"/>

    <component
      id="ExchangeRateQuery"
      service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.ExchangeRateQueryArgs, Ucommerce][Ucommerce.Catalog.Models.ExchangeRateQueryResult, Ucommerce]]"
      type="Ucommerce.NHibernate.Impl.ExchangeRateQuery, Ucommerce.NHibernate"/>


    <!-- ProductCatalogBuiltInPropertiesQuery -->
    <component
      id="ProductCatalogBuiltInPropertiesQuery"
      service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.ProductCatalogBuiltInPropertiesQueryArgs, Ucommerce][Ucommerce.Catalog.Models.ProductCatalogBuiltInPropertiesQueryResult, Ucommerce]]"
      type="Ucommerce.NHibernate.Impl.ProductCatalogBuiltInPropertiesQuery, Ucommerce.NHibernate"/>

    <!-- CategoryBuiltInPropertiesQuery -->
    <component
      id="CategoryBuiltInPropertiesQuery"
      service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.CategoryBuiltInPropertiesQueryArgs, Ucommerce][Ucommerce.Catalog.Models.CategoryBuiltInPropertiesQueryResult, Ucommerce]]"
      type="Ucommerce.NHibernate.Impl.CategoryBuiltInPropertiesQuery, Ucommerce.NHibernate"/>

    <!-- PriceGroupsQuery -->
    <component
      id="PriceGroupsQuery"
      service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.PriceGroupsQueryArgs, Ucommerce][Ucommerce.Catalog.Models.PriceGroupsQueryResult, Ucommerce]]"
      type="Ucommerce.NHibernate.Impl.PriceGroupsQuery, Ucommerce.NHibernate"/>

    <!-- DefinitionsForTypeQuery -->
    <component
      id="DefinitionsForTypeQuery"
      service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.DefinitionsForTypeQueryArgs, Ucommerce][Ucommerce.Catalog.Models.DefinitionsForTypeQueryResult, Ucommerce]]"
      type="Ucommerce.NHibernate.Impl.DefinitionsForTypeQuery, Ucommerce.NHibernate"/>

    <!-- CategoriesQuery -->
    <component
      id="CategoriesQuery"
      service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.CategoriesQueryArgs, Ucommerce][Ucommerce.Catalog.Models.CategoriesQueryResult, Ucommerce]]"
      type="Ucommerce.NHibernate.Impl.CategoriesQuery, Ucommerce.NHibernate"/>

    <!-- CatalogsQuery -->
    <component
      id="CatalogsQuery"
      service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.CatalogsQueryArgs, Ucommerce][Ucommerce.Catalog.Models.CatalogsQueryResult, Ucommerce]]"
      type="Ucommerce.NHibernate.Impl.CatalogsQuery, Ucommerce.NHibernate"/>

    <!-- Tree Service for listing all Catalogs-->
    <component
      id="CatalogsRootSectionProvider"
      service="Ucommerce.Tree.ITreeContentProvider, Ucommerce"
      type="Ucommerce.Tree.Impl.Providers.CatalogsRootSectionProvider, Ucommerce"/>

    <component
      id="CatalogBuilderCatalogsTreeService"
      service="Ucommerce.Tree.ITreeContentService, Ucommerce"
      type="Ucommerce.Tree.Impl.TreeContentService, Ucommerce">
      <parameters>
        <RootNodeType>root</RootNodeType>
        <RootNodeHasAutoLoad>true</RootNodeHasAutoLoad>
        <RootNodeHasChildren>true</RootNodeHasChildren>
        <RootNodeName>Product Catalogs</RootNodeName>
        <RootNodeIcon>fa fa-folder-open</RootNodeIcon>
        <RootNodeItemGuid>3806A967-DD30-421F-A835-7D8DE80054B9</RootNodeItemGuid>
        <RootNodeId>-1</RootNodeId>
        <RootNodeParentId>-1</RootNodeParentId>
        <contentProviders>
          <list type="Ucommerce.Tree.ITreeContentProvider, Ucommerce">
            <item>${CatalogsRootSectionProvider}</item>
          </list>
        </contentProviders>
      </parameters>
    </component>

    <component id="TreeNodeServiceCatalogBuilderCatalogs"
               service="Ucommerce.Web.ITreeNodeService, Ucommerce"
               type="Ucommerce.Web.Impl.ContentNodeService, Ucommerce">
      <parameters>
        <serviceType>CatalogBuilderCatalogs</serviceType>
        <treeNodeContentToTreeNodeConverter>${TreeNodeConverterService}</treeNodeContentToTreeNodeConverter>
        <treeContentService>${CatalogBuilderCatalogsTreeService}</treeContentService>
      </parameters>
    </component>

	  <!-- Dynamic Properties-->
    <component
      id="DynamicPropertiesService"
      service="Ucommerce.Catalog.IDynamicPropertiesService, Ucommerce"
      type="Ucommerce.Catalog.Impl.DynamicPropertiesService, Ucommerce">
      <parameters>
        <DynamicPropertyProviders>
          <list type="Ucommerce.Catalog.IDynamicPropertyProvider, Ucommerce">
            <item>${ProductCatalogDynamicPropertyProvider}</item>
            <item>${DataTypeDynamicPropertyProvider}</item>
            <item>${CategoryDynamicPropertyProvider}</item>
          </list>
        </DynamicPropertyProviders>
      </parameters>
    </component>

    <component
      id="ProductCatalogDynamicPropertyProvider"
      service="Ucommerce.Catalog.IDynamicPropertyProvider, Ucommerce"
      type="Ucommerce.Catalog.Impl.ProductCatalogDynamicPropertyProvider, Ucommerce">
      <parameters>
        <ProductCatalogPropertiesQuery>${ProductCatalogPropertiesQuery}</ProductCatalogPropertiesQuery>
      </parameters>
    </component>

    <component
        id="DataTypeDynamicPropertyProvider"
        service="Ucommerce.Catalog.IDynamicPropertyProvider, Ucommerce"
        type="Ucommerce.Catalog.Impl.DataTypeDynamicPropertyProvider, Ucommerce">
      <parameters>
        <DataTypePropertiesQuery>${DataTypePropertiesQuery}</DataTypePropertiesQuery>
      </parameters>
    </component>

    <component
        id="CategoryDynamicPropertyProvider"
        service="Ucommerce.Catalog.IDynamicPropertyProvider, Ucommerce"
        type="Ucommerce.Catalog.Impl.CategoryDynamicPropertyProvider, Ucommerce">
      <parameters>
        <CategoryPropertiesQuery>${CategoryPropertiesQuery}</CategoryPropertiesQuery>
      </parameters>
    </component>

    <!-- ProductCatalogPropertiesQuery -->
    <component
      id="ProductCatalogPropertiesQuery"
      service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.EntityPropertiesQueryArgs, Ucommerce][Ucommerce.Catalog.Models.EntityPropertiesQueryResult, Ucommerce]]"
			type="Ucommerce.NHibernate.Impl.ProductCatalogPropertiesQuery, Ucommerce.NHibernate">
			<parameters>
				<EntityPropertiesQuery>${EntityPropertiesQuery}</EntityPropertiesQuery>
			</parameters>
		</component>

    <!-- DataTypePropertiesQuery -->
    <component
      id="DataTypePropertiesQuery"
      service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.EntityPropertiesQueryArgs, Ucommerce][Ucommerce.Catalog.Models.EntityPropertiesQueryResult, Ucommerce]]"
			type="Ucommerce.NHibernate.Impl.DataTypePropertiesQuery, Ucommerce.NHibernate">
			<parameters>
				<EntityPropertiesQuery>${EntityPropertiesQuery}</EntityPropertiesQuery>
			</parameters>
		</component>

    <!-- CategoryPropertiesQuery -->
    <component
      id="CategoryPropertiesQuery"
      service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.CategoryPropertiesQueryArgs, Ucommerce][Ucommerce.Catalog.Models.CategoryPropertiesQueryResult, Ucommerce]]"
      type="Ucommerce.NHibernate.Impl.CategoryPropertiesQuery, Ucommerce.NHibernate"/>

    <!-- EntityPropertiesQuery -->
    <component
      id="EntityPropertiesQuery"
      service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.EntityPropertiesQueryArgs, Ucommerce][Ucommerce.Catalog.Models.EntityPropertiesQueryResult, Ucommerce]]"
      type="Ucommerce.NHibernate.Impl.EntityPropertiesQuery, Ucommerce.NHibernate"/>

    <!-- DefinitionFieldsQuery -->
    <component
      id="DefinitionFieldsQuery"
      service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.DefinitionFieldsQueryArgs, Ucommerce][Ucommerce.Catalog.Models.DefinitionFieldsQueryResult, Ucommerce]]"
      type="Ucommerce.NHibernate.Impl.DefinitionFieldsQuery, Ucommerce.NHibernate"/>

	  <component
			id="OptionsAndSelectedValuesQuery"
			service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.OptionsAndSelectedValuesQueryArgs, Ucommerce][Ucommerce.Catalog.Models.OptionsAndSelectedValuesQueryResult, Ucommerce]]"
			type="Ucommerce.NHibernate.Impl.OptionsAndSelectedValuesQuery, Ucommerce.NHibernate"/>

        <component
            id="CategoryValidator"
            service="FluentValidation.AbstractValidator`1[[Ucommerce.EntitiesV2.Category, Ucommerce]], FluentValidation"
            type="Ucommerce.SystemHttp.Validators.CategoryValidator, Ucommerce.SystemHttp">
            <parameters>
              <EnforceCategoryNameUniquenessWithinCatalogs>#{enforceCategoryNameUniquenessWithinCatalogs}</EnforceCategoryNameUniquenessWithinCatalogs>
            </parameters>
        </component>
        <component
              id="CategoryDescriptionValidator"
              service="FluentValidation.AbstractValidator`1[[Ucommerce.EntitiesV2.CategoryDescription, Ucommerce]], FluentValidation"
              type="Ucommerce.SystemHttp.Validators.CategoryDescriptionValidator, Ucommerce.SystemHttp">
        </component>

		<component
			id="CatalogValidator"
			service="FluentValidation.AbstractValidator`1[[Ucommerce.EntitiesV2.ProductCatalog, Ucommerce]], FluentValidation"
			type="Ucommerce.SystemHttp.Validators.CatalogValidator, Ucommerce.SystemHttp">
		</component>
		<component
			id="CatalogDescriptionValidator"
			service="FluentValidation.AbstractValidator`1[[Ucommerce.EntitiesV2.ProductCatalogDescription, Ucommerce]], FluentValidation"
			type="Ucommerce.SystemHttp.Validators.CatalogDescriptionValidator, Ucommerce.SystemHttp">
		</component>

		<component
            id="ProductValidator"
            service="FluentValidation.AbstractValidator`1[[Ucommerce.EntitiesV2.Product, Ucommerce]], FluentValidation"
            type="Ucommerce.SystemHttp.Validators.ProductValidator, Ucommerce.SystemHttp">
    </component>

		<component
						id="VariantValidator"
						service="FluentValidation.AbstractValidator`1[[Ucommerce.EntitiesV2.Product, Ucommerce]], FluentValidation"
						type="Ucommerce.SystemHttp.Validators.VariantValidator, Ucommerce.SystemHttp">
			<parameters>
			<ProductValidator>${ProductValidator}</ProductValidator>
		</parameters>
		</component>

		<component
            id="ProductDescriptionValidator"
            service="FluentValidation.AbstractValidator`1[[Ucommerce.EntitiesV2.ProductDescription, Ucommerce]], FluentValidation"
            type="Ucommerce.SystemHttp.Validators.ProductDescriptionValidator, Ucommerce.SystemHttp">
    </component>

		<component
            id="ProductDefinitionsAndDefinitionFieldsQuery"
            service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.ProductDefinitionsAndDefinitionFieldsQueryArgs, Ucommerce][Ucommerce.Catalog.Models.ProductDefinitionsAndDefinitionFieldsQueryResult, Ucommerce]]"
            type="Ucommerce.NHibernate.Impl.ProductDefinitionsAndDefinitionFieldsQuery, Ucommerce.NHibernate"/>

    <component
      id="ProductsBuiltInPropertiesQuery"
      service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.ProductsBuiltInPropertiesQueryArgs, Ucommerce][Ucommerce.Catalog.Models.ProductsBuiltInPropertiesQueryResult, Ucommerce]]"
      type="Ucommerce.NHibernate.Impl.ProductsBuiltInPropertiesQuery, Ucommerce.NHibernate"/>

    <component
      id="ProductBuiltInPropertiesQuery"
      service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.ProductBuiltInPropertiesQueryArgs, Ucommerce][Ucommerce.Catalog.Models.ProductBuiltInPropertiesQueryResult, Ucommerce]]"
      type="Ucommerce.NHibernate.Impl.ProductBuiltInPropertiesQuery, Ucommerce.NHibernate"/>

		<component
						id="ProductsPropertiesQuery"
						service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.ProductsPropertiesQueryArgs, Ucommerce][Ucommerce.Catalog.Models.ProductsPropertiesQueryResult, Ucommerce]]"
						type="Ucommerce.NHibernate.Impl.ProductsPropertiesQuery, Ucommerce.NHibernate"/>

		<component
						id="ProductPropertiesQuery"
						service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.ProductPropertiesQueryArgs, Ucommerce][Ucommerce.Catalog.Models.ProductPropertiesQueryResult, Ucommerce]]"
						type="Ucommerce.NHibernate.Impl.ProductPropertiesQuery, Ucommerce.NHibernate"/>

		<component
						id="ProductsByGuidQuery"
						service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.ProductsByGuidQueryArgs, Ucommerce][Ucommerce.Catalog.Models.ProductsByGuidQueryResult, Ucommerce]]"
						type="Ucommerce.NHibernate.Impl.ProductsByGuidQuery, Ucommerce.NHibernate"/>

		<component
						id="ProductsBaseUnitPriceQuery"
						service="Ucommerce.IQuery`2[[Ucommerce.Catalog.Models.ProductsBaseUnitPriceQueryArgs, Ucommerce][Ucommerce.Catalog.Models.ProductsBaseUnitPriceQueryResult, Ucommerce]]"
						type="Ucommerce.NHibernate.Impl.ProductsBaseUnitPriceQuery, Ucommerce.NHibernate"/>

		<component
						id="CreateCatalog"
						service="Ucommerce.Catalog.ICreateCatalog, Ucommerce"
						type="Ucommerce.Catalog.Impl.CreateCatalog, Ucommerce"/>
  </components>
</configuration>
